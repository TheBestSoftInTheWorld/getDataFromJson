/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gradle_app;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.*;

public class App {
	public String getGreeting() {
		return "Hello world.";
	}

	static List<Information> in = new ArrayList<>();

	private static final EntityManagerFactory emFactoryObj;
	private static final String PERSISTENCE_UNIT_NAME = "JPAService";

	static {
		emFactoryObj = Persistence.createEntityManagerFactory(PERSISTENCE_UNIT_NAME);
	}

	// This Method Is Used To Retrieve The 'EntityManager' Object
	public static EntityManager getEntityManager() {
		return emFactoryObj.createEntityManager();
	}

	public static List<Information> getIn() {
		return in;
	}

	public static void setIn(List<Information> in) {
		App.in = in;
	}

	public static void main(String[] args) {

		// JSON parser object to parse read file
		JSONParser jsonParser = new JSONParser();

		try {
			URL resource = App.class.getClassLoader().getResource("info.json");
			System.out.println(resource.toString());
			FileReader reader = new FileReader(resource.getFile());

			// Read JSON file
			Object obj = jsonParser.parse(reader);

			JSONArray infoList = (JSONArray) obj;
			System.out.println(infoList);

			infoList.forEach(emp -> parseInformationObject((JSONObject) emp));

			List<Information> info = getIn();

			saveInformation(info);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

		} catch (IOException e) {
			e.printStackTrace();
		} catch (ParseException e) {
			e.printStackTrace();
		}

	}

	public static void saveInformation(List<Information> inf) {
		EntityManager entityMgr = getEntityManager();
		entityMgr.getTransaction().begin();
		InformationEntity infObj = new InformationEntity();
		String id;
		long start_time;
		long end_time;
		long duration;
		for (int i = 0; i < inf.size(); i++) {
			if (inf.get(i).getState().equals("STARTED")) {
				id = inf.get(i).getId();
				start_time = inf.get(i).getTimestamp();

				final String _id = id;
				Information info1 = inf.stream().filter(customer -> _id.equals(customer.getId()))
						.filter(customer -> "FINISHED".equals(customer.getState())).findAny().orElse(null);

				end_time = info1.getTimestamp();
				duration = end_time - start_time;
				infObj.setDuration(duration);
				if (duration > 4) {
					infObj.setAlert(true);
				} else {
					infObj.setAlert(false);
				}

				if (inf.get(i).getHost() != null) {
					infObj.setHost(inf.get(i).getHost());
				} else {
					infObj.setHost(null);
				}
				if (inf.get(i).getType() != null) {
					infObj.setType_(inf.get(i).getType());
				} else {
					infObj.setType_(null);
				}
				infObj.setId_(id);

				entityMgr.merge(infObj);
			} else {
				continue;
			}

		}

		entityMgr.getTransaction().commit();

		entityMgr.clear();
		System.out.println("Records Successfully Inserted In The Database");
	}

	private static void parseInformationObject(JSONObject info) {

		String id = info.get("id").toString();
		String state = info.get("state").toString();
		String type = null;
		if (info.get("type") != null) {
			type = info.get("type").toString();
		}
		String host = null;
		if (info.get("host") != null) {
			host = info.get("host").toString();
		}
		long timestamp = (long) info.get("timestamp");

		in.add(new Information(id, state, type, host, timestamp));

	}

}
